{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { auth, db } from \"./firebase\";\nimport { doc, setDoc, Timestamp, collection, query, getDoc, addDoc, where } from 'firebase/firestore';\nimport { async, querystring } from '@firebase/util';\nexport var createUserOnRegister = function createUserOnRegister(user, username) {\n  var userRef = doc(db, 'avatars', user.uid);\n  var userData = {\n    email: user.email,\n    username: username,\n    uid: user.uid,\n    role: 'student',\n    dateCreated: Timestamp.fromDate(new Date())\n  };\n  return setDoc(userRef, userData);\n};\nexport var getAvatar = function _callee() {\n  var ref, snap, avatar;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ref = doc(db, \"avatars\", auth.currentUser.uid);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getDoc(ref));\n\n        case 3:\n          snap = _context.sent;\n          avatar = snap.data();\n          return _context.abrupt(\"return\", avatar);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getAllAvatars = function _callee2() {\n  var avatars, querySnapshot;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          avatars = [];\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(collection(db, 'avatars')));\n\n        case 3:\n          querySnapshot = _context2.sent;\n          querySnapshot.forEach(function (doc) {\n            var avatar = _objectSpread(_objectSpread({}, doc.data()), {}, {\n              uid: doc.id\n            });\n\n            avatars.push(avatar);\n          });\n          return _context2.abrupt(\"return\", avatars);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updateProfile = function updateProfile(uid, data) {\n  var userRef = doc(db, 'avatars', uid);\n  return setDoc(userRef, data, {\n    merge: true\n  });\n};\nexport var newComp = function newComp(comp) {\n  return addDoc(collection(db, 'comps'), comp);\n};\nexport var getAllComp = function getAllComp() {\n  return collection(db, \"comps\");\n};\nexport var getEntryOffComp = function _callee3(id) {\n  var entries, collectionRef, collectionSnapshot;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          entries = [];\n          collectionRef = collection(db, \"comps/\" + id + \"/entries\");\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(collectionRef));\n\n        case 4:\n          collectionSnapshot = _context3.sent;\n          collectionSnapshot.forEach(function (doc) {\n            entries.push(doc.data());\n          });\n          return _context3.abrupt(\"return\", entries);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var addEntryToComp = function addEntryToComp(data, id) {\n  console.log(id);\n  var collectionRef = collection(db, \"comps/\" + id + \"/entries\");\n  return addDoc(collectionRef, data);\n};","map":{"version":3,"names":["auth","db","doc","setDoc","Timestamp","collection","query","getDoc","addDoc","where","async","querystring","createUserOnRegister","user","username","userRef","uid","userData","email","role","dateCreated","fromDate","Date","getAvatar","ref","currentUser","snap","avatar","data","getAllAvatars","avatars","getDocs","querySnapshot","forEach","id","push","updateProfile","merge","newComp","comp","getAllComp","getEntryOffComp","entries","collectionRef","collectionSnapshot","addEntryToComp","console","log"],"sources":["/Users/jeandredevilliers/Desktop/Project/FunkySocky/Database.js"],"sourcesContent":["import { auth, db } from \"./firebase\";\nimport  {doc, setDoc, Timestamp, collection, query, getDoc,addDoc, where} from 'firebase/firestore';\nimport { async, querystring } from '@firebase/util';\n\n\nexport const createUserOnRegister = (user, username) => {\n  //document reference : doc(firestore init, collection name , optional -- id of the document name/id)\n    const userRef = doc(db, 'avatars', user.uid);\n\n  //create data\n    const userData = {\n        email: user.email,\n        username: username,\n        uid: user.uid,\n        role: 'student',\n        dateCreated: Timestamp.fromDate(new Date())\n    }\n//set a doc : setDoc(docRef, data we want to set, any additional option like merge)\n    return setDoc(userRef, userData);\n}\n\n//returns our collection reference that we want to listen for real updates\nexport const getAvatar = async () => {\n\n    const ref = doc(db, \"avatars\", auth.currentUser.uid);\n    const snap = await getDoc(ref);\n\n    let avatar = snap.data()\n    return avatar;\n\n}\n\n\nexport const getAllAvatars = async () => {\n\n    const avatars = [];\n  \n    //get snapshot of our avatars collection\n    const querySnapshot = await getDocs(collection(db, 'avatars'));\n  \n  \n    //need to loop through snapshot\n    querySnapshot.forEach((doc) => {\n      let avatar = { ...doc.data(), uid: doc.id }\n      avatars.push(avatar);\n    })\n  \n    return avatars;\n}\n  \n//set our profiles data\nexport const updateProfile = (uid, data) => {\n    const userRef = doc(db, 'avatars', uid)\n    return setDoc(userRef, data, {merge: true}) \n}\n\n//new competition\nexport const newComp = (comp) => {\n    return addDoc( collection(db, 'comps'), comp )\n}\n\n//returns our collection reference that we want to listen for real updates\nexport const getAllComp = () => {\n    return collection(db, \"comps\");\n}\n\n//enter a competition and get scorecard\n// export const addEntryToComp = async(id, titlecomp) => {\n//     const collectionRef = collection(db, 'comps/' + id + '/entries')\n    \n//     const addentry = {\n//         uid: auth.currentUser.uid,\n//         title: titlecomp,\n//         description: \"description\",\n//         mode: \"mode\",\n//         image: \"Image\",\n//         score: '0'\n//     }\n    \n//     return addDoc(collectionRef, addentry);\n    \n//   }\n\n\n//get feat of a project\nexport const getEntryOffComp =async (id) =>{\n    let entries = []\n\n    const collectionRef = collection(db, \"comps/\"+id+\"/entries\")\n    const collectionSnapshot = await getDocs(collectionRef)\n\n    collectionSnapshot.forEach((doc) =>{\n        entries.push(doc.data())\n    })\n    return entries\n    \n}\n\n\n\nexport const addEntryToComp = (data, id) =>{\n    console.log(id)\n    const collectionRef = collection(db, \"comps/\"+id+\"/entries\")\n \n    return addDoc(collectionRef,data)\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}